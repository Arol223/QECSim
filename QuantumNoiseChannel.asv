% A container class used to specify noise operations. Add operation
% elements without probabilities as this enables tuning. Elements are
% specified in ndarray
classdef QuantumNoiseChannel < handle
    properties
        nbits
        probability
        operation_elements
    end
    
    methods
        function obj = QuantumNoise(nbits, probability, operation_elements)
            obj.probabilities = probability;
            obj.nbits = nbits; % E.g a 2 qubit operation
            obj.operation_elements = operation_elements;
        end
        
        function op = nbit_noise_element(obj, element_number, targets, tot_bits)
            element = obj.operator_elements(:,:,element_number);
            for i = 1:tot_bits
                if ismember(i,targets)
                    pre_op(:,:,i) = element;
                else
                    pre_op(:,:,i) = speye(2);
                end
            end
            op = tensor_product(pre_op);
        end
        
        function State = apply_noise(obj, nstate, targets)
            if ~isa(nstate, 'NbitState')
                error('Please specify an NbitState to be affected by noise')
            end
            State = (1-obj.probability)*nstate.rho;
            for i = 1:size(obj.operation_elements,3)
                
                State = State + nstate.rho
            end
        end
    end
end